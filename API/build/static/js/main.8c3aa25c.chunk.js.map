{"version":3,"sources":["ProtectedRoute.js","components/molecules/ModalLogIn.jsx","img/user1.svg","components/styled/Buttons.js","components/styled/Nav.js","components/functions/viewPassword.js","components/functions/Validates.js","components/functions/decryptToken.js","components/functions/Token.js","components/functions/logOut.js","components/hooks/useLogIn.jsx","components/hooks/useProfile.jsx","components/hooks/useActiveModal.jsx","components/hooks/useForm.jsx","components/hooks/useSurvey.jsx","components/hooks/useSurveys.jsx","components/hooks/useGraphics.jsx","components/hooks/usePaginate.jsx","components/molecules/Nav.jsx","components/molecules/SideImage.jsx","img/encuesta.svg","components/molecules/CardSurvey.jsx","img/error404.png","components/pages/Pagina404.jsx","components/styled/Home.js","components/atom/Errors.jsx","components/atom/TitleForm.jsx","components/atom/Input.jsx","img/loading.svg","components/atom/Spinner.jsx","components/molecules/CreateInput.jsx","img/sucess.png","components/molecules/SuccessModal.jsx","components/molecules/ModalSurvey.jsx","components/molecules/Pagination.jsx","components/pages/Home.jsx","img/login.png","img/view.svg","components/pages/LogIn.jsx","img/signup.png","components/pages/SingUp.jsx","components/pages/Surveys.jsx","img/done.png","components/pages/ViewSurveys.jsx","components/molecules/Footer.jsx","components/pages/Profile.jsx","img/sad.svg","components/pages/MySurvey.jsx","components/routes/Routes.jsx","App.js","index.js"],"names":["ProtectedRoute","Component","component","isAuth","rest","render","props","undefined","to","pathname","state","from","location","Modal","setAppElement","ModalLogIn","toggle","title","work","note","isOpen","onRequestClose","style","overlay","backgroundColor","zIndex","content","display","flexDirection","justifyContent","alignItems","className","onClick","Button","css","secondary","flex","NavBar","styled","nav","NavButton","NavLink","SectionButtons","section","SectionLogOut","div","ContainerOptions","NameUser","p","ImgUser","img","NavOptions","LogOutOptions","ul","viewPassword","active","password","current","type","validateUsername","username","length","validateEmail","email","test","validatePassword","parseJwt","token","base64","split","replace","JSON","parse","window","atob","cookie","Cookies","cookies","Token","get","descript","useLogIn","userEmail","useState","errorEmail","errorPassword","form","setForm","captureEmail","value","capturePassword","useProfile","history","useHistory","data","userData","name","setToken","isPassword","setIsPassword","error","setError","validateError","element","toggleInput","e","a","target","elementValue","updateProfile","axios","put","_id","then","resp","push","catch","console","log","deleteAccount","delete","preventDefault","useActiveModal","setActive","document","body","overflow","useForm","usernameRef","emailRef","passwordRef","errorUsername","values","setValues","captureUsername","useSurvey","id","profile","sucessHandle","survey","setSurvey","result","setResult","useEffect","response","getData","setOption","option","filter","id_questions","find","validateOption","copy","isName","getElementById","id_options","parentNode","classList","remove","user","getAttribute","container","add","Poll","questions","map","post","useSurveys","url","optional","surveys","setSurveys","totalPages","setTotalPages","getSurvey","Math","ceil","userDB","useGraphics","labels","setData","colors","rp","options","datasets","rate","index","usePaginate","surveysCard","page","setPage","lastIndex","firstIndex","surveysPerPage","paginate","numPage","currentSurveys","slice","Nav","useActive","toggleActive","useLocation","logOut","src","alt","SideImage","image","CardSurvey","author","question","buttonTitle","toggleSurvey","show","setShow","cardRef","useRef","IntersectionObserver","entries","observer","isIntersecting","disconnect","threshold","observe","ref","cardImage","Pagina404","errorImg","IconAdd","CgAddR","MySurveys","ButtonAddSurvey","button","cardsAnimation","keyframes","NotPoll","span","CardContainer","Errors","TitleForm","Input","require","place","styles","key","placeholder","disabled","autoComplete","Spinner","LoadingImg","CreateInput","optionHandle","sucessModal","shouldCloseOnOverlayClick","shouldCloseOnEsc","ModalSurvey","reload","inputTitle","inputQuestion","inputOption","setOptions","created_by","description","postSurvey","position","top","left","width","height","onSubmit","data-target","dataTarget","newSurvey","deleteQuestion","i","data-option","data-parent","dataOption","dataParent","indexOf","splice","deleteOption","SuccessModal","sucessImg","Pagination","activeNext","setActiveNext","activePrev","setActivePrev","Home","extra","surversPerPage","LogIn","toggleSubmit","request","handle","message","LogInImage","required","onChange","viewImage","SingUp","handleSubmit","SingImg","Surveys","surveyCard","setSurveyCard","ViewSurveys","match","params","toggleOptions","data-question","sucessFormImg","Footer","Profile","userdates","toggleModal","errors","confPassword","activePassword","defaultValue","MySurvey","validate","deleteSurvey","status","SadImage","responsive","Routes","auth","setAuth","toggleLogIn","exact","path","App","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.8c3aa25c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nconst ProtectedRoute = ({ component: Component, isAuth, ...rest }) => {\r\n    return(\r\n        <Route \r\n            { ...rest } \r\n            render={ props => {\r\n                if(isAuth !== undefined) {\r\n                    return (\r\n                        <Component />\r\n                    )\r\n                } else {\r\n                    return(\r\n                        <Redirect to={\r\n                            {\r\n                                pathname:\"/login\",\r\n                                state: { \r\n                                    from: props.location \r\n                                } \r\n                            }\r\n                        }/>\r\n                    )\r\n                }\r\n        }}/>\r\n    )\r\n}\r\n\r\nexport default ProtectedRoute;","import React from 'react'\r\nimport Modal from 'react-modal'\r\nimport '../css/modal.css'\r\n\r\n//Indicandole a la aplicacion a donde debe pertenecer este modal\r\nModal.setAppElement('#root')\r\n\r\nconst ModalLogIn = ({ state, toggle, title, work, note }) => {\r\n    return(\r\n        <Modal \r\n            isOpen={ state }\r\n            onRequestClose={ toggle }\r\n            style={\r\n                {\r\n                    overlay:{\r\n                        backgroundColor: 'rgba(184, 184, 184, .4)',\r\n                        zIndex: 20\r\n                    },\r\n                    content: {\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center'\r\n                    }\r\n                }\r\n            }\r\n            className=\"modal\"\r\n        >\r\n            <h1 className=\"title-modal\">{ title }</h1>\r\n            <span className=\"text-note\">{ note }</span>\r\n            <div>\r\n                <button className=\"btn-modal cancel\" onClick={ toggle }>Cancelar</button>\r\n                <button className=\"btn-modal acepted\" onClick={ work }>Aceptar</button>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalLogIn","export default __webpack_public_path__ + \"static/media/user1.7bbddee0.svg\";","import { css } from 'styled-components'\r\n\r\nexport const Button = css`\r\n    background-color: ${props => props.secondary === 'true' ? '#2f28a6' : 'transparent'};\r\n    color: ${props => props.secondary === 'true' ? '#fff' : null};\r\n    display: block;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    font-family: 'Source Sans Pro', sans-serif;\r\n    border: 1px solid #2f28a6;\r\n    font-size: 1rem;\r\n\r\n    @media screen and (min-width: 600px){\r\n        transition: all .1s ease-in;\r\n    \r\n        &:hover {\r\n            background-color: #2f28a6;\r\n            color: #fff;\r\n            border: 1px solid #2f28a6;\r\n        }\r\n    }\r\n`;","import styled, { css } from 'styled-components'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Button } from './Buttons'\r\n   \r\nconst flex = css`\r\n    display: flex;\r\n`;\r\n    \r\nexport const NavBar = styled.nav`\r\n    ${flex};\r\n    position: fixed;\r\n    top: 0;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color: white;\r\n    z-index: 10;\r\n`; \r\n    \r\nexport const NavButton = styled(NavLink)`\r\n    position: relative;\r\n    padding: 7px 10px;\r\n    ${Button};\r\n    padding-top: 5px;\r\n    text-decoration: none;\r\n    margin-left: 10px;\r\n    font-size: 1rem;\r\n    \r\n    @media screen and (max-width: 600px){\r\n        font-size: .9rem;\r\n    }\r\n`;\r\n\r\nexport const SectionButtons = styled.section`\r\n    ${flex};\r\n`;\r\n\r\nexport const SectionLogOut = styled.div`\r\n    position: relative;\r\n    top: 0;\r\n`;\r\n\r\nexport const ContainerOptions = styled.div`\r\n    display: flex;\r\n    gap: 10px;\r\n    cursor: pointer;\r\n\r\n    &:hover ~ ul {\r\n        display: block;\r\n    }\r\n`;\r\n\r\nexport const NameUser = styled.p`\r\n    margin-right: 20px;\r\n`;\r\n\r\nexport const ImgUser = styled.img`\r\n    width: 30px;\r\n`;\r\n\r\nexport const NavOptions = styled.div`\r\n    ${Button};\r\n    border-radius: 0;\r\n    padding: 0;\r\n    text-align: center;\r\n    width: 140px;\r\n    padding-top: 5px;\r\n    height: 25px;\r\n    outline: none;\r\n    border: 1px solid #2f28a6;\r\n    font-size: 1rem;\r\n\r\n    @media screen and (max-width: 600px){\r\n        height: 30px;\r\n    }\r\n`;\r\n\r\nexport const LogOutOptions = styled.ul`\r\n    position: absolute;\r\n    display: none;\r\n    top: 65%;\r\n    right: 5px;\r\n    list-style: none;\r\n\r\n    &:hover {\r\n        display: block;\r\n    }\r\n`;","export const viewPassword = (active, password) => {\r\n    if(!active){\r\n        password.current.type = 'text';\r\n        return true;\r\n    }\r\n    else{\r\n        password.current.type = 'password';\r\n        return false;\r\n    }\r\n}","export const validateUsername = username => {\r\n    if(username.length > 6){\r\n        return \"\";\r\n    }\r\n     else if(username.length < 5){\r\n        return \"Su contraseña/nombre debe tener como minimo 5 caracteres\"\r\n    }\r\n    else if(!username || username.length === 0){\r\n        return \"Campo vacio\"\r\n    }\r\n}\r\n\r\nexport const validateEmail = email => {\r\n    if (!email) {\r\n        return \"Campo vacio\"\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(email)) {\r\n        return \"Direccion de correo no valida.\"\r\n    }\r\n}\r\n\r\nexport const validatePassword = password => {\r\n    if (!password) {\r\n        return \"Campo vacio\"\r\n    } else if (password.length < 5) {\r\n        return \"Debe tener 5 o mas caracteres\"\r\n    } else {\r\n        return \"\"\r\n    }\r\n}","export const parseJwt = (token) => {\r\n    let base64Url = token.split('.')[1];\r\n    let base64 = base64Url.replace('-', '+').replace('_', '/')\r\n    return JSON.parse(window.atob(base64));\r\n}","import { descript } from './index'\r\nimport cookies from 'universal-cookie'\r\n\r\nconst cookie = new cookies();\r\n\r\nexport const Token = () => {\r\n    const token = cookie.get('auth')\r\n    const data = descript(token)\r\n\r\n    return data;\r\n}","import { useHistory } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport Cookies from 'universal-cookie'\r\n\r\nconst cookie = new Cookies()\r\n\r\nconst LogOut = async () => {\r\n    const history = useHistory();\r\n    \r\n    const token = cookie.get('auth')\r\n    \r\n    if(token){\r\n        await axios.get('/api/logout')\r\n        .then(resp => resp)\r\n        .catch(error => console.log(error))\r\n\r\n        history.push('/login')\r\n    } \r\n}\r\n\r\nexport default LogOut","import { useState } from 'react'\r\nimport { validateEmail, validatePassword } from '../functions/index'\r\n\r\n\r\nconst useLogIn = (userEmail, password) => {\r\n    const [form, setForm] = useState({\r\n        userEmail: \"\",\r\n        password: \"\",\r\n        errorEmail: \"\",\r\n        errorPassword: \"\"\r\n    })\r\n\r\n    const captureEmail = () => {\r\n        setForm({\r\n            ...form,\r\n            userEmail: userEmail.current.value,\r\n            errorEmail: validateEmail(userEmail.current.value)\r\n        })\r\n    }\r\n    const capturePassword = () => {\r\n        setForm({\r\n            ...form,\r\n            password: password.current.value,\r\n            errorPassword: validatePassword(password.current.value)\r\n        })\r\n    }\r\n\r\n    return{ form, captureEmail, capturePassword }\r\n}\r\n\r\nexport default useLogIn","import { useState } from 'react'\r\nimport { validateUsername, validatePassword } from '../functions/index'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { parseJwt } from '../functions/decryptToken'\r\nimport axios from 'axios';\r\nimport cookies from 'universal-cookie'\r\n\r\nconst cookie = new cookies();\r\n\r\nconst useProfile = () => {\r\n    const history = useHistory()\r\n    const data = cookie.get('auth');\r\n    const userData = parseJwt(data);\r\n    const [token, setToken] = useState({\r\n        name: userData.name,\r\n        email: userData.email,\r\n        password: ''\r\n    })\r\n\r\n    const [isPassword, setIsPassword] = useState();\r\n\r\n    let [error, setError] = useState({\r\n        name: ''\r\n    })\r\n    \r\n    const validateError = (name, element) => {\r\n        if(name === 'name'){\r\n            setError({\r\n                name: validatePassword(element)\r\n            })\r\n        } else if (name === 'email') {\r\n            setError({\r\n                name: validateUsername(element)\r\n            })\r\n        } else if (name === 'newPassword'){\r\n            setIsPassword(element)\r\n            \r\n        } else if (name === 'password'){\r\n            if(element === isPassword){\r\n                setError({\r\n                    name: \"\"\r\n                })\r\n            }else{\r\n                setError({\r\n                    name: \"Las contraseñas no coinciden\"\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleInput = async (e) => {\r\n        const element = e.target.name\r\n        const elementValue = e.target.value\r\n\r\n        validateError(element, elementValue);\r\n\r\n        await setToken({\r\n            ...token,\r\n            [element]: elementValue\r\n        })\r\n    }\r\n\r\n    const updateProfile = async (name, email, password) => {\r\n        if(password.length < 6){\r\n            setError({\r\n                name: \"Amigo, debe ingresar su contraseña antigua o tu nueva contraseña. No puedes dejar este campo vacio\"\r\n            })\r\n        }else {\r\n            await axios.put(`/api/users/${userData._id}`, {\r\n                name: name,\r\n                email: email,\r\n                password: password\r\n            })\r\n                .then(resp => resp.data === \"OK\" ? history.push('/login') : null)\r\n                .catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    const deleteAccount = async () => {\r\n        await axios.delete(`/api/users/${userData._id}`)\r\n            .then(resp => console.log(resp))\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    const toggleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if(error.name.length > 0){\r\n            setError({\r\n                name: \"Porfavor, revise los campos llenados previamente\"\r\n            })\r\n        }else{\r\n            updateProfile(token.name, token.email, token.password);\r\n        }\r\n    }\r\n    \r\n    return [token, toggleSubmit, toggleInput, error, deleteAccount];\r\n}\r\n\r\nexport default useProfile","import { useState } from 'react'\r\n\r\nconst useActiveModal = () => {\r\n    const [active, setActive] = useState(false);\r\n\r\n    const toggleModal = async () => {\r\n        await setActive(!active);\r\n\r\n        active ? document.body.style.overflow = 'auto' : document.body.style.overflow = 'hidden';\r\n    }\r\n    return [active, toggleModal]\r\n}\r\n\r\nexport default useActiveModal;","import { validateUsername, validateEmail, validatePassword } from '../functions/Validates'\r\nimport { useState } from 'react'\r\n\r\nconst useForm = (usernameRef, emailRef, passwordRef) => {\r\n    const [values, setValues] = useState({\r\n        username: \"\",\r\n        errorUsername: \"\",\r\n        email: \"\",\r\n        errorEmail: \"\",\r\n        password: \"\",\r\n        errorPassword: \"\",\r\n    });\r\n\r\n    const captureUsername = () => {\r\n        setValues({\r\n            username: usernameRef.current.value,\r\n            errorUsername: validateUsername(usernameRef.current.value),\r\n            email: emailRef.current.value,\r\n            errorEmail: \"\",\r\n            password: passwordRef.current.value,\r\n            errorPassword: \"\",\r\n        })\r\n    }\r\n\r\n    const captureEmail = () => {\r\n        setValues({\r\n            username: usernameRef.current.value,\r\n            errorUsername: validateUsername(usernameRef.current.value),\r\n            email: emailRef.current.value,\r\n            errorEmail: validateEmail(emailRef.current.value),\r\n            password: passwordRef.current.value,\r\n            errorPassword: \"\",\r\n        })\r\n    }\r\n\r\n    const capturePassword = () => {\r\n        setValues({\r\n            username: usernameRef.current.value,\r\n            errorUsername: validateUsername(usernameRef.current.value),\r\n            email: emailRef.current.value,\r\n            errorEmail: validateEmail(emailRef.current.value),\r\n            password: passwordRef.current.value,\r\n            errorPassword: validatePassword(passwordRef.current.value),\r\n        })\r\n    }\r\n\r\n    return { values, captureUsername, captureEmail, capturePassword }\r\n}\r\n\r\nexport default useForm","import { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst useSurvey = (id, profile, sucessHandle) => {\r\n    const [survey, setSurvey] = useState();\r\n    const [result, setResult] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            await axios.get(`/api/poll/${id}`)\r\n            .then(resp => {\r\n                return resp.data\r\n            })\r\n            .then(response => setSurvey(response))\r\n            .catch(error => console.log(error))\r\n        }\r\n\r\n        getData();\r\n    }, [id])\r\n\r\n    const validateOption = (name) => {\r\n        const copiaState = result.filter(resp => resp.id_questions !== name);\r\n        const isName = result.find(resp => resp.id_questions === name)\r\n        return [copiaState, isName];\r\n    }\r\n\r\n    const setOption = (name, option) => {\r\n        let [copy, isName] = validateOption(name)\r\n        \r\n        if(copy && isName !== undefined){\r\n            const container = document.getElementById(isName.id_options + \"Item\").parentNode;\r\n            container.classList.remove('repeat');\r\n            \r\n            setResult(\r\n                [\r\n                ...copy,\r\n                {\r\n                    user: profile._id,\r\n                    id_questions: name,\r\n                    id_options: option\r\n                }\r\n            ])\r\n        } else{\r\n            setResult([\r\n                ...result,\r\n                {\r\n                    user: profile._id,\r\n                    id_questions: name,\r\n                    id_options: option\r\n                }\r\n            ])\r\n        }\r\n    }\r\n\r\n    const toggleOptions = ({ target }) => {\r\n        const option = target.getAttribute('name');\r\n        const name = target.getAttribute('data-question')\r\n        const container = target.parentNode;\r\n\r\n        setOption(name, option);\r\n        container.classList.add('repeat');\r\n    }\r\n\r\n    const sendData = (data) => {\r\n        data.map(resp => axios.post(`/api/answer/Poll/${id}`, resp)\r\n        .then(response => console.log(response))\r\n        .catch(error => console.log(error)))\r\n    }\r\n\r\n    const toggleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(result.length < survey.Poll.questions.length){\r\n            return 'Complete la encuesta 😪😫';\r\n        } else {\r\n           sendData(result);\r\n           sucessHandle();\r\n        }\r\n    }\r\n\r\n    return[survey, toggleOptions, toggleSubmit];\r\n}\r\n\r\nexport default useSurvey","import { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst useSurveys = (url, optional)=> {\r\n    const [surveys, setSurveys] = useState();\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const surveysPerPage = 8;\r\n\r\n    const getSurvey = async () => {\r\n        await axios.get(url)\r\n            .then(resp => {\r\n                optional ? setSurveys(resp.data.Poll.questions) : setSurveys(resp)\r\n                setTotalPages(Math.ceil(resp.data.userDB.length / surveysPerPage))\r\n            }).catch(error => console.log(error))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSurvey();\r\n    }, [url, optional])\r\n\r\n    const extra = () => {\r\n        getSurvey();\r\n    }\r\n\r\n    return [surveys, extra, totalPages, surveysPerPage]\r\n}\r\n\r\nexport default useSurveys","import { useState, useEffect } from 'react'\r\n\r\nconst useGraphics = survey => {\r\n    const [data, setData] = useState([{\r\n        labels: []\r\n    }])\r\n    \r\n    \r\n    useEffect(() => {\r\n        const colors = ['#da1e37', '#0466c8', '#2ec4b6', '#fdffb6', '#cdb4db', '#81b29a', '#6761df', '#adb5bd'];\r\n        survey && (\r\n            setData(\r\n                {\r\n                    name: survey.map(rp => {return rp.name}),\r\n                    labels: survey.map(rp => rp.options.map(resp => {return resp.option})),\r\n                    datasets: {\r\n                        data: survey.map(rp => rp.options.map(resp => {return resp.rate})),\r\n                        backgroundColor: survey.map(rp => rp.options.map((resp, index) => {return colors[index]}))\r\n                    }\r\n                })\r\n        )\r\n    }, [survey])\r\n\r\n    return data;\r\n}\r\n\r\nexport default useGraphics","import { useState } from 'react'\r\n\r\nconst usePaginate = (surveysCard) => {\r\n    const [page, setPage] = useState(1);\r\n    const surveysPerPage = 8;\r\n    const lastIndex = page * surveysPerPage;\r\n    const firstIndex = lastIndex - surveysPerPage;\r\n\r\n    const currentSurveys = surveysCard && (surveysCard.slice(firstIndex, lastIndex))\r\n\r\n    const paginate = numPage => setPage(numPage)\r\n\r\n    return {page, surveysPerPage, paginate, currentSurveys}\r\n}\r\n\r\nexport default usePaginate\r\n","import React from 'react'\r\nimport Modal from './ModalLogIn'\r\nimport user from '../../img/user1.svg'\r\nimport { NavBar, NavButton, SectionButtons, NavOptions, SectionLogOut, LogOutOptions, ImgUser, ContainerOptions, NameUser } from '../styled/Nav';\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { useActive } from '../hooks/index'\r\nimport { Token }  from '../functions/index'\r\nimport axios from 'axios'\r\nimport Cookies from 'universal-cookie'\r\n\r\nconst cookie = new Cookies()\r\n\r\nconst Nav = () => {\r\n    const history = useHistory();\r\n    const token = Token()\r\n    const [active, toggleActive] = useActive();\r\n    const location = useLocation()\r\n\r\n    const logOut = async () => {       \r\n        const token = cookie.get('auth')\r\n        \r\n        if(token){\r\n            await axios.get('/api/logout')\r\n            .then(resp => resp)\r\n            .catch(error => console.log(error))\r\n\r\n            history.push('/login')\r\n        } \r\n    }\r\n\r\n    return(\r\n        <>\r\n        <NavBar>\r\n            <SectionButtons>\r\n                <NavButton \r\n                    to=\"/\" \r\n                    secondary={location.pathname === '/' ? \"true\" : null}\r\n                >\r\n                    Mis Encuestas\r\n                </NavButton>\r\n                <NavButton \r\n                    to=\"/surveys\" \r\n                    secondary={location.pathname === '/surveys' ? \"true\" : null}\r\n                >\r\n                    Responder Encuestas\r\n                </NavButton>\r\n            </SectionButtons>\r\n            <SectionLogOut>\r\n                <ContainerOptions>\r\n                    <ImgUser src={ user } alt=\"\"/>\r\n                    <NameUser>\r\n                        { token.name }\r\n                    </NameUser>\r\n                </ContainerOptions>\r\n                <LogOutOptions>\r\n                    <li>\r\n                        <NavOptions onClick={ () => history.push('/profile') }>\r\n                            Editar Perfil\r\n                        </NavOptions>\r\n                    </li>\r\n                    <li>\r\n                        <NavOptions onClick={ toggleActive }>\r\n                            Cerrar Sesion\r\n                        </NavOptions>\r\n                    </li>\r\n                </LogOutOptions>\r\n            </SectionLogOut>\r\n        </NavBar>\r\n        <Modal \r\n            state={ active } \r\n            toggle={ toggleActive }\r\n            title={ \"¿Estas seguro que deseas cerrar sesión?\" }\r\n            work={ logOut }\r\n        />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Nav","import React from 'react'\r\n\r\nconst SideImage = ({ image }) => {\r\n    return(\r\n        <div className=\"side1\">\r\n            <div className=\"image-container\">\r\n                <img src={ image } alt=\"singup\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideImage","export default __webpack_public_path__ + \"static/media/encuesta.f3817be0.svg\";","import React, { useState, useEffect, useRef } from 'react'\r\nimport cardImage from '../../img/encuesta.svg'\r\nimport '../css/Card.css'\r\n\r\nconst CardSurvey = ({ id, title, author, question, buttonTitle, toggleSurvey }) => {\r\n    const [show, setShow] = useState(false)\r\n    const cardRef = useRef()\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            threshold: 0\r\n        }\r\n        const showChapter = (entries, observer) => {\r\n            const entry = entries[0];\r\n\r\n            if(entry.isIntersecting){\r\n                setShow(true);\r\n                observer.disconnect();\r\n            }\r\n        }\r\n        \r\n        const observer = new IntersectionObserver(showChapter, options);\r\n        \r\n        observer.observe(cardRef.current);\r\n    }, [])\r\n\r\n    return(\r\n        <div className=\"card\" ref={ cardRef }>\r\n           {\r\n               show ? (\r\n                   <>\r\n                    <div className=\"cardItem \">\r\n                        <img \r\n                            src={ cardImage } \r\n                            alt=\"Icono-encuesta\" \r\n                            className=\"imgCard\"\r\n                        />\r\n                        <h1 className=\"cardTitle\">{ title }</h1>\r\n                    </div>\r\n                    <div className=\"cardItem\">\r\n                        <p className=\"cardParagraph\">\r\n                            <span>Autor</span>\r\n                            { author }\r\n                        </p>\r\n                        <p \r\n                            className=\"cardParagraph\"\r\n                        >\r\n                            <span>N° Preguntas</span>\r\n                            { question }\r\n                        </p>\r\n                    </div>\r\n                    <button \r\n                        className=\"cardItem cardButton\" \r\n                        onClick={ () => toggleSurvey(id)}\r\n                    >\r\n                        { buttonTitle }\r\n                    </button>\r\n                   </>\r\n               ) : null\r\n           }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardSurvey","export default __webpack_public_path__ + \"static/media/error404.694b4357.png\";","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport errorImg from '../../img/error404.png'\r\nimport '../css/Error.css'\r\n\r\nconst Pagina404 = () => {\r\n    const history = useHistory();\r\n    return (\r\n        <div className=\"error404\">\r\n            <img src={errorImg} alt=\"error404Img\"/>\r\n            <p className=\"errorText\">Error404: Page Not Found!</p>\r\n            <div className=\"btn-back\" onClick={() => history.push('/home')}>\r\n                <span>Back</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagina404\r\n","import styled, { keyframes } from 'styled-components'\r\nimport { Button } from './Buttons'\r\nimport { CgAddR } from 'react-icons/cg'\r\n\r\nexport const IconAdd = styled(CgAddR)`\r\n    position: relative;\r\n    left: 10px;\r\n    top: 1px;\r\n    padding-right: 5px;\r\n`;\r\n\r\nexport const MySurveys = styled.section`\r\n    padding-top: 20px;\r\n    border-radius: 15px 15px 0 0;\r\n    margin: auto;\r\n    margin-top: 80px;\r\n    margin-bottom: 40px;\r\n    width: 85%;\r\n    background-color: white;\r\n    min-height: calc(100vh - 80px);\r\n    -webkit-box-shadow: 1px 6px 22px -10px rgba(33,37,41,1);\r\n    -moz-box-shadow: 1px 6px 22px -10px rgba(33,37,41,1);\r\n    box-shadow: 1px 6px 22px -10px rgba(33,37,41,1);\r\n\r\n    @media screen and (max-width: 850px){\r\n        width: 90%;\r\n    }\r\n\r\n    @media screen and (max-width: 700px){\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nexport const ButtonAddSurvey = styled.button`\r\n    padding: 7px 10px;\r\n    ${Button}\r\n    color:  #2f28a6;\r\n    position: relative;\r\n    display: block;\r\n    outline: none;\r\n    margin: auto;\r\n`;\r\n\r\nconst cardsAnimation = keyframes`\r\n    0%{\r\n        transform: translateX(-100%);\r\n    }\r\n    100%{\r\n        transform: translateX(0);\r\n    }\r\n`;\r\n\r\nexport const NotPoll = styled.span`\r\n    position: relative;\r\n    top: 15px;\r\n    display:block;\r\n    text-align: center;\r\n`;\r\n\r\nexport const CardContainer = styled.div`\r\n    animation: ${cardsAnimation} .6s ease-out;\r\n    animation-fill-mode: forwards; \r\n    padding: 30px 0;\r\n    margin: auto;\r\n    width: 98%;\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 240px);\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 20px;\r\n    \r\n    @media screen and (max-width: 1150px){\r\n        grid-template-columns: repeat(4, 1fr);\r\n        width: 95%;\r\n    }\r\n    @media screen and (max-width: 950px){\r\n      grid-template-columns: repeat(3, 1fr);\r\n    }\r\n\r\n     @media screen and (max-width: 850px){\r\n        width: 98%;\r\n    }\r\n    @media screen and (max-width: 600px){\r\n        place-items: center;\r\n        grid-template-columns: repeat(2, 1fr);\r\n        gap: 5px;\r\n    }\r\n\r\n     @media screen and (max-width: 500px){\r\n        gap: 10px;\r\n    }\r\n`;","import React from 'react'\r\n\r\nconst Errors = ({ error, secondary }) => {\r\n    return(\r\n        <p className={ secondary === \"true\" ?  \"error error-profile\" : \"error\" }>\r\n            { error }\r\n        </p>\r\n    );\r\n}\r\n\r\nexport default Errors;","import React from 'react'\r\n\r\nconst TitleForm = ({ content }) => {\r\n    return(\r\n        <div className=\"title-singup\">\r\n            <h1>{ content }</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TitleForm","import React from 'react'\r\n\r\nconst Input = ({ require, name, place, styles, key, secondary }) => {\r\n    return(\r\n        <input \r\n            type=\"text\"\r\n            name={ name }\r\n            placeholder={ place }\r\n            className={ styles }\r\n            ref={ require }\r\n            key={ key }\r\n            disabled={ secondary === \"true\" ? true : null }\r\n            autoComplete=\"off\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default Input","export default __webpack_public_path__ + \"static/media/loading.38d4dd8c.svg\";","import React from 'react'\r\nimport LoadingImg from '../../img/loading.svg'\r\nimport '../css/Spinner.css'\r\n\r\nconst Spinner = () => {\r\n    return(\r\n        <div className=\"spinner\">\r\n            <img \r\n                src={ LoadingImg } \r\n                alt=\"Cargando...\"\r\n                className=\"spinner-img\"\r\n            />\r\n            <h1 className=\"spinner-title\">Cargando...</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner","import React from 'react'\r\nimport { BiPlus } from 'react-icons/bi'\r\nimport { Input } from '../atom/index'\r\n\r\nconst CreateInput = ({ question, optionHandle, option }) => {\r\n    return (\r\n        <div className=\"survey\">\r\n            <Input \r\n                name=\"question\"\r\n                place=\"Pregunta\"\r\n                styles=\"questions\"\r\n                require={ question }\r\n            />\r\n            <ul>\r\n                <li>\r\n                    <Input \r\n                        name=\"Option\"\r\n                        place=\"Opción\"\r\n                        styles=\"options\"\r\n                        require={ option }\r\n                    />\r\n                </li>\r\n            </ul>\r\n            <button \r\n                className=\"add-option\" \r\n                title=\"Añadir opción\"\r\n                onClick={optionHandle}\r\n            >\r\n                <BiPlus />\r\n            </button>    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateInput\r\n","export default __webpack_public_path__ + \"static/media/sucess.d33ed3ac.png\";","import React from 'react'\r\nimport Modal from 'react-modal'\r\nimport '../css/modal.css'\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst sucessModal = ({ state, toggle, image, title, button }) => {\r\n    return (\r\n        <Modal\r\n            isOpen={ state }\r\n            onRequestClose={ toggle }\r\n            shouldCloseOnOverlayClick={false}\r\n            shouldCloseOnEsc={false}\r\n            className='modal'\r\n            style={\r\n                {\r\n                    overlay:{\r\n                        backgroundColor: 'rgba(184, 184, 184, .4)',\r\n                        zIndex: 99\r\n                    },\r\n                    content: {\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center'\r\n                    }\r\n                }\r\n            }\r\n        >\r\n            <img className=\"success-img\" src={ image } alt=\"modal-img\"/>\r\n            <span className=\"message-modal\">{ title }</span>\r\n            <button className=\"btn-modal acepted\" onClick={ button }>Aceptar</button>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default sucessModal\r\n","import React, { useState, useRef } from 'react'\r\nimport axios from 'axios'\r\nimport CreateInput from './CreateInput'\r\nimport Modal from 'react-modal'\r\nimport sucessImg from '../../img/sucess.png'\r\nimport SuccessModal from '../molecules/SuccessModal'\r\nimport { BiAddToQueue, BiSend } from 'react-icons/bi'\r\nimport { Errors } from '../atom/index'\r\nimport { Token } from '../functions/index'\r\nimport { useActive } from '../hooks/index'\r\nimport '../css/ModalSurvey.css'\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst ModalSurvey = ({ state, toggle, reload }) => {\r\n    const [active, toggleActive] = useActive()\r\n    const data = Token();\r\n    const inputTitle = useRef()\r\n    const inputQuestion = useRef()\r\n    const inputOption = useRef()\r\n    const [options, setOptions] = useState([])\r\n    const [error, setError] = useState()\r\n    const [survey, setSurvey] = useState({\r\n        created_by: \"\",\r\n        description: '',\r\n        questions: []\r\n    })\r\n\r\n    const inputHandle = (e) => {\r\n        e.preventDefault();\r\n\r\n        const name = inputQuestion.current.value;\r\n\r\n        if(!inputTitle.current.value && !name) {\r\n            setError('Los campos no pueden estar vacios')\r\n        } else if(!inputTitle.current.value) {\r\n            setError('Añada un titulo a la encuesta')\r\n        } else if(!name) {\r\n            setError('Añada una pregunta a la encuesta')\r\n        } else if(options.length < 2 || options.length === 0) {\r\n            setError('Añade 2 o mas opciones')\r\n        } else {\r\n            setSurvey({\r\n                created_by: data._id,\r\n                description: inputTitle.current.value,\r\n                questions: [\r\n                    ...survey.questions,\r\n                    {\r\n                        name,\r\n                        options\r\n                    }\r\n                ]\r\n            })\r\n    \r\n            inputQuestion.current.value = \"\";\r\n            setOptions([]);\r\n        }\r\n    }\r\n\r\n    const optionHandle = (e) => {\r\n        e.preventDefault();\r\n\r\n        const name = inputOption.current.value\r\n\r\n        if(!name) {\r\n            setError('Añade opciones a tus preguntas')\r\n        } else {\r\n            setOptions([\r\n                ...options,\r\n                name\r\n            ])\r\n            inputOption.current.value = \"\";\r\n        }\r\n    }\r\n\r\n    const postSurvey = async (data) => {\r\n        await axios.post('/api/poll', data)\r\n            .then(resp => console.log(resp))\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(!survey.questions || !survey.description) {\r\n            setError('Asegurate de haber llenado correctamente los campos')\r\n        } else {  \r\n            postSurvey(survey)\r\n            setError()\r\n            setSurvey()\r\n            reload();\r\n            toggleActive(true)\r\n        }\r\n    }\r\n\r\n    const deleteQuestion = (e) => {\r\n        const dataTarget = e.target.getAttribute('data-target')\r\n\r\n        const newSurvey = survey.questions.filter(resp => resp.name !== dataTarget)\r\n\r\n        setSurvey({\r\n            ...survey,\r\n            questions: newSurvey\r\n        })\r\n    }\r\n\r\n    const deleteOption = e => {\r\n        const dataOption = e.target.getAttribute('data-option')\r\n        const dataParent = e.target.getAttribute('data-parent')\r\n\r\n        let index;\r\n\r\n        survey.questions.map(resp => resp.name === dataParent ? (\r\n            resp.options.length <= 1 ? (\r\n                setError('La pregunta no puede quedar sin respuestas')\r\n            ) : (\r\n                index = resp.options.indexOf(dataOption),\r\n                resp.options.splice(index, 1)\r\n            )\r\n        ) : null)\r\n\r\n        setSurvey({...survey})\r\n    }\r\n\r\n    const successButton = () => {\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={ state }\r\n            onRequestClose={ toggle }\r\n            className=\"modal-survey\"\r\n            style={\r\n                {\r\n                    overlay: {\r\n                        position: 'fixed',\r\n                        zIndex: '20',\r\n                        top: '0',\r\n                        left: '0',\r\n                        width: '100vw',\r\n                        height: '100vh',\r\n                        backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                    }\r\n                }\r\n            }\r\n        >\r\n            <div className=\"modal-head\">\r\n                <h1 className=\"modal-title\">Crear nueva encuesta</h1>\r\n                <button className=\"modal-close\" onClick={ toggle }>X</button>\r\n            </div>\r\n            <form className=\"modal-body\" onSubmit={handleSubmit}>\r\n                <div className=\"survey-head\">\r\n                    <input\r\n                        name=\"title\"\r\n                        type=\"text\"\r\n                        placeholder=\"Titulo de encuesta\"\r\n                        id=\"title\"\r\n                        className=\"survey-title\"\r\n                        ref={ inputTitle }\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"tools-buttons\">\r\n                        <button \r\n                            className=\"add btn\" \r\n                            onClick={inputHandle}\r\n                            title=\"Añadir nueva pregunta\"\r\n                        >\r\n                            <BiAddToQueue \r\n                                className=\"icon\"\r\n                            />\r\n                        </button>\r\n                        <button \r\n                            className=\"send btn\"\r\n                            title=\"Enviar encuesta\"\r\n                        >\r\n                            <BiSend \r\n                                className=\"icon\"\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    error && <Errors error={error}/>\r\n                }\r\n                <div className=\"survey-body\">\r\n                    <CreateInput\r\n                        optionHandle={ optionHandle }\r\n                        option={ inputOption }\r\n                        question={ inputQuestion }\r\n                        key=\"one\"\r\n                    />  \r\n                </div>\r\n            </form>\r\n            <div className=\"survey-body\">\r\n                    {\r\n                        survey && (\r\n                            survey.questions.map((resp, index) =>\r\n                            <div className=\"survey\" key={ index * 20}>\r\n                                    <button\r\n                                        className=\"button-delete button-delete__question\"\r\n                                        data-target={resp.name}\r\n                                        onClick={ e => deleteQuestion(e)}\r\n                                    >\r\n                                        X\r\n                                    </button>\r\n                                    <p\r\n                                        className=\"question-show\"\r\n                                        key={ index }\r\n                                    >\r\n                                        {resp.name}\r\n                                    </p>\r\n                                    <ul>\r\n                                    {\r\n                                        resp.options.map((response, i) =>  <li key={ i }\r\n                                        className=\"options-create\"\r\n                                        >\r\n                                             <button\r\n                                                className=\"button-delete button-delete__option\"\r\n                                                data-option={response}\r\n                                                data-parent={resp.name}\r\n                                                onClick={ e => deleteOption(e)}\r\n                                            >\r\n                                                X\r\n                                            </button>\r\n                                            <p\r\n                                                key={ i }\r\n                                            >\r\n                                                {response}\r\n                                            </p>\r\n                                        </li>)\r\n                                    }\r\n                                    </ul>\r\n                                </div>\r\n                            )\r\n                        )\r\n                    }\r\n            </div>\r\n            <SuccessModal\r\n                state={ active }\r\n                toggle={ toggleActive }\r\n                image={ sucessImg }\r\n                title={ \"Encuesta creada correctamente! 👍😁\" }\r\n                button={ successButton }\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalSurvey\r\n","import React, { useState, useEffect } from 'react'\r\nimport '../css/Pagination.css'\r\n\r\nconst Pagination = ({ page, totalPages, paginate }) => {\r\n    const [activeNext, setActiveNext] = useState(true);\r\n    const [activePrev, setActivePrev] = useState(true);\r\n\r\n    const next = () => {\r\n        paginate(page + 1)\r\n        \r\n    }\r\n\r\n    const prev = () => {\r\n        paginate(page - 1)\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        if (totalPages === page) {\r\n            setActiveNext(true)\r\n        } else if (totalPages === 0) {\r\n            setActiveNext(true)\r\n        } else {\r\n            setActiveNext(false)\r\n        }\r\n    }, [totalPages, page])\r\n\r\n    useEffect(() => {\r\n        if (page === 1) {\r\n            setActivePrev(true)\r\n        } else {\r\n            setActivePrev(false)\r\n        }\r\n    }, [totalPages, page])\r\n\r\n    return (\r\n        (\r\n            totalPages < 2 ? null : (\r\n                <div className=\"btnContent\">\r\n                    <button className=\"btnPage\" onClick={prev} disabled={activePrev}> &#8592; </button>\r\n                    <button className=\"btnPage\" onClick={next} disabled={activeNext}> &#8594; </button>\r\n                </div>\r\n            )\r\n        )\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n","import { useState } from 'react'\r\nimport { Nav } from '../molecules/index'\r\nimport { MySurveys, ButtonAddSurvey, IconAdd,CardContainer, NotPoll } from '../styled/Home'\r\nimport { CardSurvey } from '../molecules/index'\r\nimport { useActive, useSurveys } from '../hooks/index'\r\nimport { Spinner } from '../atom/index'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Token } from '../functions/index'\r\nimport Modal from '../molecules/ModalSurvey'\r\nimport Pagination from '../molecules/Pagination'\r\n\r\nconst Home = () => {\r\n    const [page, setPage] = useState(1);\r\n    const history = useHistory();\r\n    const data = Token();\r\n    const url = `/api/userAllpoll/${data._id}`;\r\n    const [active, toggleActive] = useActive();\r\n    const [surveys, extra, totalPages, surversPerPage] = useSurveys(url)\r\n\r\n    //Redirigir a los detalles de una encuesta\r\n    const toggleSurvey = id => {\r\n        history.push(`/mysurvey/${id}`);\r\n    }\r\n\r\n    const lastIndex = page * surversPerPage;\r\n    const firstIndex = lastIndex - surversPerPage;\r\n    const currentSurveys = surveys && (surveys.data.userDB.slice(firstIndex, lastIndex))\r\n    const paginate = numPage => setPage(numPage)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                surveys && data ? (\r\n                    <>\r\n                        <Nav />\r\n                        <MySurveys>\r\n                            <ButtonAddSurvey onClick={ toggleActive }>\r\n                                Crear Nueva encuesta\r\n                                <IconAdd />\r\n                            </ButtonAddSurvey>\r\n                            {\r\n                                !currentSurveys.length ? (\r\n                                    <NotPoll>Usted aun no tiene encuestas creadas <br/> Pulse en Crear nueva encuesta para crear una <br/> 🎶💖😉🤞</NotPoll>\r\n                                ) : (\r\n                                   <div>\r\n                                    <CardContainer>\r\n                                    {\r\n                                        currentSurveys.map((resp, index)=>\r\n                                            <CardSurvey\r\n                                                key={index}\r\n                                                title={resp.description}\r\n                                                author={data.name}\r\n                                                question={resp.questions.length}\r\n                                                buttonTitle= \"Ver\"\r\n                                                toggleSurvey={ () => toggleSurvey(resp._id)}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                    </CardContainer>\r\n                                    <Pagination\r\n                                        page={ page }\r\n                                        totalPages={ totalPages }\r\n                                        paginate={ paginate }\r\n                                    />\r\n                                   </div>\r\n                                )\r\n                            }\r\n                        </MySurveys>\r\n                        <Modal \r\n                            state={ active }\r\n                            toggle={ toggleActive }\r\n                            reload={ extra }\r\n                        />\r\n                    </>\r\n                ) : <Spinner />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home","export default __webpack_public_path__ + \"static/media/login.ffe0c8d4.png\";","export default __webpack_public_path__ + \"static/media/view.e24ff65a.svg\";","import React, { useRef, useState } from 'react'\r\nimport LogInImage from '../../img/login.png'\r\nimport axios from 'axios'\r\nimport viewImage from '../../img/view.svg'\r\nimport { SideImage } from '../molecules/index'\r\nimport { TitleForm, Errors } from '../atom/index'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useLogIn } from '../hooks/index'\r\nimport { viewPassword } from '../functions/index'\r\nimport '../css/LogIn.css'\r\n\r\nconst LogIn = (props) => {\r\n    const history = useHistory()\r\n    const email = useRef()\r\n    const password = useRef()\r\n    const [error, setError] = useState()\r\n    const { form, captureEmail, capturePassword } = useLogIn(email, password)\r\n    let active = false;\r\n\r\n    const toggleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const request = {\r\n            email: form.userEmail,\r\n            password: form.password\r\n        }\r\n     \r\n       if(!request.email || !request.password){\r\n            setError(\"Los datos estan vacios como el corazón de ella. (Llenalos) 😣😥\")\r\n       } else{\r\n            await axios.post('/api/login', request)\r\n            .then(resp => {\r\n                return resp.data\r\n            })\r\n            .then(response => {\r\n                if(response.isAuth){\r\n                    props.handle();\r\n                    history.push('/');\r\n                }else {\r\n                    if(!response.isAuth){\r\n                        setError(response.message)\r\n                    }\r\n                }\r\n            })\r\n       }\r\n    }\r\n\r\n    return (\r\n        <div className=\"singUp-content\">\r\n            <SideImage image={ LogInImage }/>\r\n            <div className=\"side2\">\r\n                <div className=\"side2-content\">\r\n                    <TitleForm content=\"Iniciar Sesión\"/>\r\n                    <form \r\n                        className=\"form form-login\"\r\n                        onSubmit={ e => toggleSubmit(e) }\r\n                    >\r\n                        <div className=\"formEmail containerForm\">\r\n                            <input\r\n                                name=\"userEmail\"\r\n                                type=\"email\"\r\n                                required\r\n                                placeholder=\"Ingrese su Email\"\r\n                                className=\"input inputEmail\"\r\n                                ref={ email }\r\n                                onChange={ captureEmail }\r\n                                autoComplete=\"off\"\r\n                            />\r\n                        </div>\r\n                        {form.errorEmail && <Errors error={ form.errorEmail } />}\r\n                        <div className=\"formPassword containerForm\">\r\n                            <input\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                required\r\n                                placeholder=\"Ingrese su Contraseña\"\r\n                                className=\"input inputPassword\"\r\n                                onChange={ capturePassword }\r\n                                ref={ password }\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <img \r\n                                src={ viewImage } \r\n                                alt=\"Ver\"\r\n                                className=\"viewPassword\"\r\n                                onClick={ () => active = viewPassword(active, password) }\r\n                            />\r\n                        </div>\r\n                        {form.errorPassword &&  <Errors error={ form.errorPassword } />}\r\n                        <div className=\"buttons\">\r\n                            {\r\n                                error ? (\r\n                                    <Errors error={ error }/>\r\n                                ): null\r\n                            }\r\n                            <button className=\"signup-btn\">Entrar</button>\r\n                            <button \r\n                                className=\"login-btn\" \r\n                                onClick={() => history.push('/singup')}\r\n                            >\r\n                                Registrarse\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LogIn","export default __webpack_public_path__ + \"static/media/signup.aca75e46.png\";","import React, { useRef, useState } from 'react'\r\nimport SingImg from '../../img/signup.png'\r\nimport useForm from '../hooks/useForm'\r\nimport axios from 'axios'\r\nimport viewImage from '../../img/view.svg'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Errors, TitleForm } from '../atom/index'\r\nimport { SideImage } from '../molecules/index'\r\nimport { viewPassword } from '../functions/index'\r\nimport '../css/SingUp.css'\r\n\r\nconst SingUp = (props) => {\r\n    const history = useHistory();\r\n    const usernameRef = useRef();\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const [error, setError] = useState();\r\n    const { values, captureUsername, captureEmail, capturePassword } = useForm(usernameRef, emailRef, passwordRef);\r\n    let active = false;\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        \r\n        const data= {\r\n            name: values.username,\r\n            email: values.email,\r\n            password: values.password\r\n        }\r\n\r\n        await axios.post('/api/signup', data)\r\n            .then(resp => {\r\n                return resp.data\r\n            })\r\n            .then(resp => {\r\n                if(resp.isAuth){\r\n                    props.handle();\r\n                    history.push('/');\r\n                }\r\n                else\r\n                    setError(resp.message);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"singUp-content\">\r\n            <SideImage image={ SingImg }/>\r\n            <div className=\"side2\">\r\n                <div className=\"side2-content\">\r\n                    <TitleForm content=\"Registrarse\"/>\r\n                    <form \r\n                        onSubmit={e => handleSubmit(e)} \r\n                        className=\"form\"\r\n                    >\r\n                        {\r\n                            error ? (\r\n                                <Errors error={ error }/>\r\n                            ) : null\r\n                        }\r\n                        <div className=\"username-content containerSignUp\">\r\n                            <input\r\n                                name=\"username\"\r\n                                type=\"text\"\r\n                                id=\"username\"\r\n                                placeholder=\"Nombre de Usuario\"\r\n                                ref={usernameRef}\r\n                                onChange={captureUsername}\r\n                                className=\"input\"\r\n                                autoComplete=\"off\"\r\n                                />\r\n                        </div>\r\n                        {values.errorUsername && <Errors error={values.errorUsername}/>}\r\n                        <div className=\"email-content containerSignUp\">\r\n                            <input\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                id=\"email\"\r\n                                placeholder=\"Correo\"\r\n                                ref={emailRef}\r\n                                onChange={captureEmail}\r\n                                className=\"input\"\r\n                                autoComplete=\"off\"\r\n                                />\r\n                        </div>\r\n                        {values.errorEmail && <Errors error={values.errorEmail}/>}\r\n                        <div className=\"password-content containerSignUp\">\r\n                            <input\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                placeholder=\"Contraseña\"\r\n                                ref={passwordRef}\r\n                                onChange={capturePassword}\r\n                                className=\"input\"\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <img \r\n                                src={ viewImage } \r\n                                alt=\"Ver\"\r\n                                className=\"viewPasswordSignUp\"\r\n                                onClick={ () => active = viewPassword(active, passwordRef) }\r\n                            />\r\n                        </div>\r\n                        {values.errorPassword && <Errors error={values.errorPassword}/>}\r\n                        <div className=\"buttons\">\r\n                            <button className=\"signup-btn\">Registrarse</button>\r\n                            <button \r\n                                className=\"login-btn\" \r\n                                onClick={() => history.push('/login')}\r\n                            >\r\n                                Iniciar Sesion\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingUp","import React, { useState, useEffect } from 'react'\r\nimport { Nav } from '../molecules/index'\r\nimport { MySurveys, CardContainer, NotPoll } from '../styled/Home'\r\nimport { CardSurvey } from '../molecules/index'\r\nimport { Spinner } from '../atom/index'\r\nimport Pagination from 'components/molecules/Pagination'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { usePaginate } from '../hooks/index';\r\nimport axios from 'axios'\r\n\r\nconst Surveys = () => {\r\n    const [surveyCard, setSurveyCard] = useState();\r\n    const [totalPages, setTotalPages] = useState(0)\r\n    const history = useHistory();\r\n    const {page, surveysPerPage, paginate, currentSurveys} = usePaginate(surveyCard)\r\n\r\n    useEffect(() => {\r\n        const getSurvey = async () => {\r\n            await axios.get('/api/allPoll')\r\n                .then(resp => {\r\n                    setSurveyCard(resp.data.Poll)\r\n                    setTotalPages(Math.ceil(resp.data.Poll.length / surveysPerPage))\r\n                }).catch(error => console.log(error))\r\n        }\r\n\r\n        getSurvey();\r\n    }, [surveysPerPage])\r\n\r\n    const toggleSurvey = id => {\r\n        history.push(`/viewsurvey/${id}`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n          {\r\n            surveyCard ? (\r\n                <>\r\n                  <Nav />\r\n                  <MySurveys>\r\n                    {\r\n                        !currentSurveys.length ? (\r\n                            <NotPoll>Aún no hay encuestas por mostrar 😪😫</NotPoll>\r\n                        ) : (\r\n                        <div>\r\n                          <CardContainer>\r\n                            {\r\n                              currentSurveys.map((response, index) =>\r\n                                <CardSurvey\r\n                                    id={ response._id }\r\n                                    key={response._id}\r\n                                    title={response.description}\r\n                                    author={response.author}\r\n                                    question={response.questions.length}\r\n                                    buttonTitle={ \"Ver\" }\r\n                                    toggleSurvey={ toggleSurvey }\r\n                                />\r\n                              )   \r\n                            }\r\n                          </CardContainer>\r\n                          <Pagination\r\n                            page={ page }\r\n                            totalPages={ totalPages }\r\n                            paginate={ paginate }\r\n                          />\r\n                        </div>\r\n                      )\r\n                    }\r\n                  </MySurveys>\r\n                </>\r\n            ) : <Spinner />\r\n          }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Surveys","export default __webpack_public_path__ + \"static/media/done.13c197e0.png\";","import React, { useState } from 'react'\r\nimport { Nav } from '../molecules/index'\r\nimport { Errors, Spinner } from '../atom/index'\r\nimport { useSurvey } from '../hooks/index'\r\nimport { Token } from '../functions/index'\r\nimport '../css/ViewSurvey.css'\r\nimport sucessFormImg from '../../img/done.png'\r\nimport { useHistory } from 'react-router-dom'\r\nimport SuccessModal from '../molecules/SuccessModal'\r\nimport { useActive } from '../hooks/index'\r\n\r\nconst ViewSurveys = ({ match }) => {\r\n    const [active, toggleActive] = useActive()\r\n    const history = useHistory()\r\n    const id = match.params._id;\r\n    const data = Token();\r\n    const sucessHandle = () => {\r\n        toggleActive(true)\r\n    }\r\n    const [survey, toggleOptions, toggleSubmit] = useSurvey(id, data, sucessHandle);\r\n    const [error, setError] = useState('')\r\n\r\n    const sucessBtn = () => {\r\n        history.push('/surveys')\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {\r\n          survey ? (\r\n            <>\r\n                <Nav />\r\n                <form \r\n                    className=\"viewSurvey form-viewsurvey\" \r\n                    onSubmit={ e => setError(toggleSubmit(e)) }\r\n                >\r\n                    {\r\n                        <div className=\"survey-body\">\r\n                            <h1 className=\"title-survey\">\r\n                                { survey.Poll.description }\r\n                            </h1>\r\n                            {\r\n                                error && (\r\n                                    <Errors error={ error }/>\r\n                                )\r\n                            }\r\n                            {survey.Poll.questions.map((resp, index) =>\r\n                              <div\r\n                                  className=\"survey\"\r\n                                  key={ index * 20}\r\n                              >\r\n                                  <h3 key={ index }>\r\n                                      {resp.name}\r\n                                  </h3>\r\n                                  <ul className=\"list-survey\">\r\n                                  {\r\n                                      resp.options.map((response, i) =>  \r\n                                      <li \r\n                                          key={ i } \r\n                                          className=\"options-survey\"\r\n                                      >\r\n                                          <p\r\n                                              key={ i }\r\n                                              name={response._id}\r\n                                              data-question={resp._id}\r\n                                              onClick={ e => toggleOptions(e) }\r\n                                              className=\"paragraph-survey\"\r\n                                              id={response._id + \"Item\"}\r\n                                          >\r\n                                              {response.option}\r\n                                          </p>\r\n                                      </li>)\r\n                                  }\r\n                                  </ul>\r\n                              </div>)\r\n                            }\r\n                      </div>      \r\n                    }\r\n                    <button \r\n                        className=\"btn-view__survey\"\r\n                        type=\"submit\"\r\n                        >\r\n                        Enviar Respuestas\r\n                    </button>\r\n                </form>\r\n                {/* <div className=\"sucess-form\" id=\"sucess\">\r\n                    <div className=\"sucess-container\">\r\n                        <img src={sucessFormImg} alt=\"\" className=\"done-img\"/>\r\n                        <h1 className=\"done-title\">Respuesta Enviada.👍😎</h1>\r\n                        <button className=\"done-btn\" onClick={sucessBtn}>Aceptar</button>\r\n                    </div>\r\n                </div> */}\r\n                <SuccessModal \r\n                    state={ active }\r\n                    toggle={ toggleActive }\r\n                    image={ sucessFormImg }\r\n                    title={\"La respuesta se envio correctamente! 👍😎\"}\r\n                    button={ sucessBtn }\r\n                />\r\n            </>\r\n          ) : <Spinner />\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ViewSurveys","import React from 'react'\r\nimport '../css/Footer.css'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <footer className=\"footer-content\">\r\n                <div className=\"content\">\r\n                    <h1>SHADOW MONKEES</h1>\r\n                    <p>© 2021 · Todos los derechos reservados</p>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React, { useRef } from 'react'\r\nimport viewImage from '../../img/view.svg'\r\nimport '../css/Profile.css'\r\nimport { useProfile, useActive } from '../hooks/index'\r\nimport { Errors } from '../atom/index'\r\nimport { Nav, Modal } from '../molecules/index'\r\nimport { viewPassword } from '../functions/index'\r\n\r\nconst Profile = () => {\r\n    const [userdates, toggleSubmit,toggleInput, error, deleteAccount] = useProfile()\r\n    const [active, toggleModal] = useActive();\r\n    const errors = error.name;\r\n    const password = useRef()\r\n    const confPassword = useRef();\r\n    let activePassword = false;\r\n\r\n    return(\r\n       <>\r\n       <Nav />\r\n        {\r\n            userdates && (\r\n                <div className=\"profile-container\">\r\n                    <div className=\"profile\">\r\n                        <header className=\"profile-header\">\r\n                            <h1 className=\"profile-title\">\r\n                                Información personal\r\n                            </h1>\r\n                        </header>\r\n                        {errors ? <Errors error={ errors } secondary=\"true\"/> : null}\r\n                        <form className=\"profile-form\" onSubmit={ e => toggleSubmit(e) }>\r\n                            <section className=\"profile-section profile-dates\">\r\n                                <label \r\n                                    className=\"lbl lbl-name\"\r\n                                >\r\n                                    Nombre\r\n                                </label>\r\n                                <input \r\n                                    className=\"inputText input-name\"\r\n                                    name=\"name\"\r\n                                    type=\"text\"\r\n                                    defaultValue={ userdates.name }\r\n                                    onChange={ e => toggleInput(e) }\r\n                                    autoComplete=\"off\"\r\n                                    required\r\n                                />\r\n                                <label \r\n                                    className=\"lbl lbl-email\"\r\n                                >\r\n                                    Correo electronico\r\n                                </label>\r\n                                <input \r\n                                    className=\"inputText input-email\"\r\n                                    type=\"text\"\r\n                                    name=\"email\"\r\n                                    defaultValue={ userdates.email }\r\n                                    onChange={ e => toggleInput(e) }\r\n                                    autoComplete=\"off\"\r\n                                    required\r\n                                />\r\n                            </section>\r\n                            <h1 className=\"profile-title change-Password\">\r\n                                Cambiar contraseña\r\n                            </h1>\r\n                            <section className=\"profile-section profile-password\">\r\n                                <label \r\n                                    className=\"lbl lbl-newPassoword\"\r\n                                >\r\n                                    Nueva contraseña\r\n                                </label>\r\n                                <div className=\"containerInputPassword\">\r\n                                    <input \r\n                                        className=\"inputText input-newPassword\"\r\n                                        type=\"password\"\r\n                                        onChange={ e => toggleInput(e) }\r\n                                        autoComplete=\"off\"\r\n                                        name=\"newPassword\"\r\n                                        ref={ confPassword }\r\n                                    />\r\n                                    <img \r\n                                        src={ viewImage } \r\n                                        alt=\"Ver\"\r\n                                        className=\"viewPassword viewPasswordProfile\"\r\n                                        onClick={ () => activePassword = viewPassword(activePassword, confPassword) }\r\n                                    />\r\n                                </div>\r\n                                <label \r\n                                    className=\"lbl lbl-confirmPassword\"\r\n                                >\r\n                                    Confirmar nueva contraseña\r\n                                </label>\r\n                                <div className=\"containerInputPassword\">\r\n                                    <input\r\n                                        className=\"inputText input-confirmPassword\"\r\n                                        type=\"password\"\r\n                                        name=\"password\"\r\n                                        onChange={ e => toggleInput(e) }\r\n                                        autoComplete=\"off\"\r\n                                        ref={ password }\r\n                                    />\r\n                                    <img \r\n                                        src={ viewImage } \r\n                                        alt=\"Ver\"\r\n                                        className=\"viewPassword viewPasswordProfile\"\r\n                                        onClick={ () => activePassword = viewPassword(activePassword, password) }\r\n                                    />\r\n                                </div>\r\n                            </section>\r\n                            <button \r\n                                type=\"submit\" \r\n                                className=\"buttonProfile sendData\"\r\n                            >\r\n                                Guardar Datos\r\n                            </button>\r\n                            <button \r\n                                className=\"buttonProfile deleteAccount\"\r\n                                onClick={ toggleModal }\r\n                            >\r\n                                Eliminar cuenta\r\n                            </button>\r\n                            <Modal \r\n                                state={ active }\r\n                                toggle={ toggleModal }\r\n                                title=\"¿Esta seguro que desea eliminar su cuenta?\"\r\n                                note=\"Nota: Al eliminar la cuenta se cerrar la sesion y perdera todos sus datos\"\r\n                                work={ deleteAccount }\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n       </>\r\n    )\r\n}\r\n\r\nexport default Profile","export default __webpack_public_path__ + \"static/media/sad.9a96bb92.svg\";","import { useSurveys, useGraphics, useActive } from '../hooks/index'\r\nimport { Spinner } from '../atom/index'\r\nimport { Nav, Modal } from '../molecules/index'\r\nimport { Doughnut } from 'react-chartjs-2'\r\nimport { useHistory } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport SadImage from '../../img/sad.svg'\r\nimport '../css/Grafica.css'\r\n\r\nconst MySurvey = ({ match }) => {\r\n    const history = useHistory();\r\n    const url = `/api/poll/${match.params.id}`;\r\n    const [active, toggleActive] = useActive()\r\n    const [survey] = useSurveys(url, true)\r\n    const data = useGraphics(survey)\r\n    let validate = 0;\r\n\r\n    //Funcion para eliminar encuesta\r\n    const deleteSurvey = async () => {\r\n        let result;\r\n        await axios.delete(url)\r\n        .then(resp => result = resp.status)\r\n        .catch(error => console.log(error))\r\n\r\n        if(result === 200){\r\n            toggleActive()\r\n            history.push('/')\r\n        }\r\n    }\r\n   \r\n    return(\r\n        <>\r\n            <Nav />\r\n            {\r\n                data.labels !== undefined ? (\r\n                    data.datasets.data[0].map(result => result !== 0 ? validate : validate++),\r\n                    validate === data.datasets.data[0].length ? (\r\n                        <div className=\"not-result graphic\">\r\n                            <p className=\"title-not-result\"><span>Nota:</span> Aún no tenemos resultados para esta encuesta</p>\r\n                            <img \r\n                                src={ SadImage } \r\n                                alt=\"Encuesta no respondida\"\r\n                                className=\"not-result-img\"\r\n                            />\r\n                        </div>\r\n                    ) : (\r\n                         data.labels.map((resp, index) => \r\n                            <div key={ index * 20 } className=\"graphic\">\r\n                                <h3 className=\"title-result\">{data.name[index]}</h3>\r\n                                <Doughnut  \r\n                                    key={index}\r\n                                    data={{\r\n                                        labels: resp,\r\n                                        datasets:[{\r\n                                            data: data.datasets.data[index],\r\n                                            backgroundColor: data.datasets.backgroundColor[index]\r\n                                        }]\r\n                                    }}\r\n                                    width={10}\r\n                                    height={3}\r\n                                    options={{ responsive: true }}\r\n                                />\r\n                        </div>)\r\n                    )\r\n                ) : <Spinner />\r\n            }\r\n            <button\r\n                className=\"btn-delete__survey\"\r\n                onClick={toggleActive}\r\n            >\r\n                Eliminar encuesta\r\n            </button>\r\n            <Modal\r\n                state={ active }\r\n                toggle={ toggleActive }\r\n                title=\"¿Estas seguto que deseas eliminar esta encuesta?\"\r\n                note=\"Nota: Si eliminas la encuesta, perderas todos los resultados obtenidos de la misma\"\r\n                work={deleteSurvey}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MySurvey","import React, { useState } from 'react'\r\nimport ProtectedRoutes from '../../ProtectedRoute'\r\nimport Cookies from 'universal-cookie'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport { Home, LogIn, SingUp, Surveys, ViewSurveys, Footer, Pagina404, Profile, MySurvey } from '../pages/index'\r\n\r\nconst cookie = new Cookies()\r\n\r\nconst Routes = () => {\r\n    const [auth, setAuth] = useState(cookie.get('auth'));\r\n\r\n    const toggleLogIn = () => {\r\n        setAuth(cookie.get('auth'))\r\n    }\r\n\r\n    return(\r\n        <Router>\r\n            <Switch>\r\n                <Route \r\n                    exact\r\n                    path=\"/login\"\r\n                    handle={ toggleLogIn }\r\n                    render={ props => <LogIn { ...props }\r\n                    handle={ toggleLogIn }/> } \r\n                />\r\n                <Route \r\n                    exact\r\n                    path=\"/singup\" \r\n                    handle={ toggleLogIn } \r\n                    render={ props => <SingUp { ...props } handle={ toggleLogIn } /> } \r\n                />\r\n                <Route \r\n                    exact \r\n                    path=\"/viewsurvey/:_id\" \r\n                    component={ auth ? ViewSurveys : Pagina404 } \r\n                />\r\n                <Route \r\n                    exact \r\n                    path=\"/mysurvey/:id\" \r\n                    component={ auth ? MySurvey : Pagina404 } \r\n                />\r\n                <ProtectedRoutes \r\n                    exact \r\n                    path=\"/\" \r\n                    component={ Home } \r\n                    isAuth={auth}\r\n                />\r\n                <ProtectedRoutes \r\n                    exact \r\n                    path=\"/profile\" \r\n                    component={ Profile }\r\n                    isAuth={auth}\r\n                />\r\n                <ProtectedRoutes \r\n                    exact \r\n                    path=\"/surveys\" \r\n                    component={ Surveys } \r\n                    isAuth={auth}\r\n                />\r\n                <Route component={ Pagina404 } />\r\n            </Switch>\r\n            <Footer />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","import Routes from './components/routes/Routes'\r\n\r\nconst App = () => {\r\n  return(\r\n    <Routes />\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}